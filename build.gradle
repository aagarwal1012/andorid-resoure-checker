plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceCompatibility = 1.8

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'org.checkerframework:checker:2.9.0'

    // Testing
    testImplementation 'junit:junit:4.12'
    testCompile 'org.checkerframework:testlib:2.5.4'
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
}

// Run `./gradlew publish` to publish your checker to your local Maven repository.
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.checkerframework'
            artifactId = 'androidresource-checker'
            version = '0.1-SNAPSHOT'

            from components.java
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

task getCodeFormatScripts {
    description "Obtain the run-google-java-format scripts"
    doLast {
        def rgjfDir = "$projectDir/.run-google-java-format"
        if (! new File(rgjfDir).exists()) {
            exec {
                commandLine 'git', 'clone', '--depth', '1', "https://github.com/plume-lib/run-google-java-format.git", rgjfDir
            }
        } else {
            // Ignore exit value so this does not halt the build when not connected to the Internet.
            exec {
                workingDir rgjfDir
                ignoreExitValue true
                commandLine 'git', 'pull', '-q'
            }
        }
    }
}

task pythonIsInstalled(type: Exec) {
    description "Check that the python executable is installed."
    executable = "python"
    args "--version"
}

task checkFormat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Formatting') {
    description "Check whether the Java source code is properly formatted"
    def javaFiles = fileTree("$projectDir").matching{ include "**/*.java" } as List
    def pythonArgs = javaFiles.clone()
    pythonArgs.add(0, "$projectDir/.run-google-java-format/check-google-java-format.py")

    commandLine "python"
    args pythonArgs
    ignoreExitValue true

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException("Found improper formatting, try running:  ./gradlew reformat")
        }
    }
}

task reformat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Formatting') {
    description "Format the Java source code according to the Google Java Format style"
    def javaFiles = fileTree("$projectDir").matching{ include "**/*.java" } as List
    def pythonArgs = javaFiles.clone()
    pythonArgs.add(0, "$projectDir/.run-google-java-format/run-google-java-format.py")

    commandLine "python"
    args pythonArgs
}

check.dependsOn jacocoTestReport
